import { Client } from '@azure-rest/core-client';
import { ClientOptions } from '@azure-rest/core-client';
import { ErrorResponse } from '@azure-rest/core-client';
import { HttpResponse } from '@azure-rest/core-client';
import { KeyCredential } from '@azure/core-auth';
import { Paged } from '@azure/core-paging';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PathUncheckedResponse } from '@azure-rest/core-client';
import { RawHttpHeaders } from '@azure/core-rest-pipeline';
import { RequestParameters } from '@azure-rest/core-client';
import { StreamableMethod } from '@azure-rest/core-client';
import { TokenCredential } from '@azure/core-auth';

export declare interface AddOrUpdateBlocklistItems {
    /** Add or update blocklistItems to a text blocklist. You can add or update at most 100 blocklistItems in one request. */
    post(options: AddOrUpdateBlocklistItemsParameters): StreamableMethod<AddOrUpdateBlocklistItems200Response | AddOrUpdateBlocklistItemsDefaultResponse>;
}

/** The request has succeeded. */
export declare interface AddOrUpdateBlocklistItems200Response extends HttpResponse {
    status: "200";
    body: AddOrUpdateTextBlocklistItemsResultOutput;
}

export declare interface AddOrUpdateBlocklistItemsBodyParam {
    /** Options for adding or updating blocklist items. */
    body: AddOrUpdateTextBlocklistItemsOptions;
}

export declare interface AddOrUpdateBlocklistItemsDefaultHeaders {
    /** String error code indicating what went wrong. */
    "x-ms-error-code"?: string;
}

export declare interface AddOrUpdateBlocklistItemsDefaultResponse extends HttpResponse {
    status: string;
    body: ErrorResponse;
    headers: RawHttpHeaders & AddOrUpdateBlocklistItemsDefaultHeaders;
}

export declare type AddOrUpdateBlocklistItemsParameters = AddOrUpdateBlocklistItemsBodyParam & RequestParameters;

/** The request to add blocklistItems to a text blocklist. */
export declare interface AddOrUpdateTextBlocklistItemsOptions {
    /** Array of blocklistItems to add. */
    blocklistItems: Array<TextBlocklistItem>;
}

/** The response of adding blocklistItems to the text blocklist. */
export declare interface AddOrUpdateTextBlocklistItemsResultOutput {
    /** Array of blocklistItems have been added. */
    blocklistItems: Array<TextBlocklistItemOutput>;
}

export declare interface AnalyzeImage {
    /** A synchronous API for the analysis of potentially harmful image content. Currently, it supports four categories: Hate, SelfHarm, Sexual, and Violence. */
    post(options: AnalyzeImageParameters): StreamableMethod<AnalyzeImage200Response | AnalyzeImageDefaultResponse>;
}

/** The request has succeeded. */
export declare interface AnalyzeImage200Response extends HttpResponse {
    status: "200";
    body: AnalyzeImageResultOutput;
}

export declare interface AnalyzeImageBodyParam {
    /** The image analysis request. */
    body: AnalyzeImageOptions;
}

export declare interface AnalyzeImageDefaultHeaders {
    /** String error code indicating what went wrong. */
    "x-ms-error-code"?: string;
}

export declare interface AnalyzeImageDefaultResponse extends HttpResponse {
    status: string;
    body: ErrorResponse;
    headers: RawHttpHeaders & AnalyzeImageDefaultHeaders;
}

/** The image analysis request. */
export declare interface AnalyzeImageOptions {
    /** The image needs to be analyzed. */
    image: ImageData_2;
    /** The categories will be analyzed. If they are not assigned, a default set of analysis results for the categories will be returned. */
    categories?: string[];
    /**
     * This refers to the type of image analysis output. If no value is assigned, the default value will be "FourSeverityLevels".
     *
     * Possible values: FourSeverityLevels
     */
    outputType?: string;
}

/** The image analysis request. */
export declare interface AnalyzeImageOptionsOutput {
    /** The image needs to be analyzed. */
    image: ImageDataOutput;
    /** The categories will be analyzed. If they are not assigned, a default set of analysis results for the categories will be returned. */
    categories?: string[];
    /**
     * This refers to the type of image analysis output. If no value is assigned, the default value will be "FourSeverityLevels".
     *
     * Possible values: FourSeverityLevels
     */
    outputType?: string;
}

export declare type AnalyzeImageParameters = AnalyzeImageBodyParam & RequestParameters;

/** The image analysis response. */
export declare interface AnalyzeImageResultOutput {
    /** Analysis result for categories. */
    categoriesAnalysis: Array<ImageCategoriesAnalysisOutput>;
}

export declare interface AnalyzeText {
    /** A synchronous API for the analysis of potentially harmful text content. Currently, it supports four categories: Hate, SelfHarm, Sexual, and Violence. */
    post(options: AnalyzeTextParameters): StreamableMethod<AnalyzeText200Response | AnalyzeTextDefaultResponse>;
}

/** The request has succeeded. */
export declare interface AnalyzeText200Response extends HttpResponse {
    status: "200";
    body: AnalyzeTextResultOutput;
}

export declare interface AnalyzeTextBodyParam {
    /** The text analysis request. */
    body: AnalyzeTextOptions;
}

export declare interface AnalyzeTextDefaultHeaders {
    /** String error code indicating what went wrong. */
    "x-ms-error-code"?: string;
}

export declare interface AnalyzeTextDefaultResponse extends HttpResponse {
    status: string;
    body: ErrorResponse;
    headers: RawHttpHeaders & AnalyzeTextDefaultHeaders;
}

/** The text analysis request. */
export declare interface AnalyzeTextOptions {
    /** The text needs to be analyzed. We support a maximum of 10k Unicode characters (Unicode code points) in the text of one request. */
    text: string;
    /** The categories will be analyzed. If they are not assigned, a default set of analysis results for the categories will be returned. */
    categories?: string[];
    /** The names of blocklists. */
    blocklistNames?: string[];
    /** When set to true, further analyses of harmful content will not be performed in cases where blocklists are hit. When set to false, all analyses of harmful content will be performed, whether or not blocklists are hit. */
    haltOnBlocklistHit?: boolean;
    /**
     * This refers to the type of text analysis output. If no value is assigned, the default value will be "FourSeverityLevels".
     *
     * Possible values: FourSeverityLevels, EightSeverityLevels
     */
    outputType?: string;
}

/** The text analysis request. */
export declare interface AnalyzeTextOptionsOutput {
    /** The text needs to be analyzed. We support a maximum of 10k Unicode characters (Unicode code points) in the text of one request. */
    text: string;
    /** The categories will be analyzed. If they are not assigned, a default set of analysis results for the categories will be returned. */
    categories?: string[];
    /** The names of blocklists. */
    blocklistNames?: string[];
    /** When set to true, further analyses of harmful content will not be performed in cases where blocklists are hit. When set to false, all analyses of harmful content will be performed, whether or not blocklists are hit. */
    haltOnBlocklistHit?: boolean;
    /**
     * This refers to the type of text analysis output. If no value is assigned, the default value will be "FourSeverityLevels".
     *
     * Possible values: FourSeverityLevels, EightSeverityLevels
     */
    outputType?: string;
}

export declare type AnalyzeTextParameters = AnalyzeTextBodyParam & RequestParameters;

/** The text analysis response. */
export declare interface AnalyzeTextResultOutput {
    /** The blocklist match details. */
    blocklistsMatch?: Array<TextBlocklistMatchOutput>;
    /** Analysis result for categories. */
    categoriesAnalysis: Array<TextCategoriesAnalysisOutput>;
}

export declare type ContentSafetyClient = Client & {
    path: Routes;
};

/**
 * Initialize a new instance of `ContentSafetyClient`
 * @param endpoint - Supported Cognitive Services endpoints (protocol and hostname, for example:
 * https://<resource-name>.cognitiveservices.azure.com).
 * @param credentials - uniquely identify client credential
 * @param options - the parameter for all optional parameters
 */
declare function createClient(endpoint: string, credentials: TokenCredential | KeyCredential, options?: ClientOptions): ContentSafetyClient;
export default createClient;

/** The request has succeeded. */
export declare interface CreateOrUpdateTextBlocklist200Response extends HttpResponse {
    status: "200";
    body: TextBlocklistOutput;
}

/** The request has succeeded and a new resource has been created as a result. */
export declare interface CreateOrUpdateTextBlocklist201Response extends HttpResponse {
    status: "201";
    body: TextBlocklistOutput;
}

export declare interface CreateOrUpdateTextBlocklistBodyParam {
    /** The resource instance. */
    body: TextBlocklistResourceMergeAndPatch;
}

export declare interface CreateOrUpdateTextBlocklistDefaultHeaders {
    /** String error code indicating what went wrong. */
    "x-ms-error-code"?: string;
}

export declare interface CreateOrUpdateTextBlocklistDefaultResponse extends HttpResponse {
    status: string;
    body: ErrorResponse;
    headers: RawHttpHeaders & CreateOrUpdateTextBlocklistDefaultHeaders;
}

export declare interface CreateOrUpdateTextBlocklistMediaTypesParam {
    /** This request has a JSON Merge Patch body. */
    contentType: "application/merge-patch+json";
}

export declare type CreateOrUpdateTextBlocklistParameters = CreateOrUpdateTextBlocklistMediaTypesParam & CreateOrUpdateTextBlocklistBodyParam & RequestParameters;

/** There is no content to send for this request, but the headers may be useful. */
export declare interface DeleteTextBlocklist204Response extends HttpResponse {
    status: "204";
}

export declare interface DeleteTextBlocklistDefaultHeaders {
    /** String error code indicating what went wrong. */
    "x-ms-error-code"?: string;
}

export declare interface DeleteTextBlocklistDefaultResponse extends HttpResponse {
    status: string;
    body: ErrorResponse;
    headers: RawHttpHeaders & DeleteTextBlocklistDefaultHeaders;
}

export declare type DeleteTextBlocklistParameters = RequestParameters;

/**
 * Helper type to extract the type of an array
 */
export declare type GetArrayType<T> = T extends Array<infer TData> ? TData : never;

/**
 * The type of a custom function that defines how to get a page and a link to the next one if any.
 */
export declare type GetPage<TPage> = (pageLink: string, maxPageSize?: number) => Promise<{
    page: TPage;
    nextPageLink?: string;
}>;

export declare interface GetTextBlocklist {
    /** Returns text blocklist details. */
    get(options?: GetTextBlocklistParameters): StreamableMethod<GetTextBlocklist200Response | GetTextBlocklistDefaultResponse>;
    /** Updates a text blocklist. If the blocklistName does not exist, a new blocklist will be created. */
    patch(options: CreateOrUpdateTextBlocklistParameters): StreamableMethod<CreateOrUpdateTextBlocklist200Response | CreateOrUpdateTextBlocklist201Response | CreateOrUpdateTextBlocklistDefaultResponse>;
    /** Deletes a text blocklist. */
    delete(options?: DeleteTextBlocklistParameters): StreamableMethod<DeleteTextBlocklist204Response | DeleteTextBlocklistDefaultResponse>;
}

/** The request has succeeded. */
export declare interface GetTextBlocklist200Response extends HttpResponse {
    status: "200";
    body: TextBlocklistOutput;
}

export declare interface GetTextBlocklistDefaultHeaders {
    /** String error code indicating what went wrong. */
    "x-ms-error-code"?: string;
}

export declare interface GetTextBlocklistDefaultResponse extends HttpResponse {
    status: string;
    body: ErrorResponse;
    headers: RawHttpHeaders & GetTextBlocklistDefaultHeaders;
}

export declare interface GetTextBlocklistItem {
    /** Get blocklistItem by blocklistName and blocklistItemId from a text blocklist. */
    get(options?: GetTextBlocklistItemParameters): StreamableMethod<GetTextBlocklistItem200Response | GetTextBlocklistItemDefaultResponse>;
}

/** The request has succeeded. */
export declare interface GetTextBlocklistItem200Response extends HttpResponse {
    status: "200";
    body: TextBlocklistItemOutput;
}

export declare interface GetTextBlocklistItemDefaultHeaders {
    /** String error code indicating what went wrong. */
    "x-ms-error-code"?: string;
}

export declare interface GetTextBlocklistItemDefaultResponse extends HttpResponse {
    status: string;
    body: ErrorResponse;
    headers: RawHttpHeaders & GetTextBlocklistItemDefaultHeaders;
}

export declare type GetTextBlocklistItemParameters = RequestParameters;

export declare type GetTextBlocklistParameters = RequestParameters;

/** Image analysis result. */
export declare interface ImageCategoriesAnalysisOutput {
    /**
     * The image analysis category.
     *
     * Possible values: Hate, SelfHarm, Sexual, Violence
     */
    category: string;
    /** The value increases with the severity of the input content. The value of this field is determined by the output type specified in the request. The output type could be ‘FourSeverityLevels’, and the output value can be 0, 2, 4, 6. */
    severity?: number;
}

/** The image can be either base64 encoded bytes or a blob URL. You can choose only one of these options. If both are provided, the request will be refused. The maximum image size is 2048 x 2048 pixels and should not exceed 4 MB, while the minimum image size is 50 x 50 pixels. */
declare interface ImageData_2 {
    /** The Base64 encoding of the image. */
    content?: string;
    /** The blob url of the image. */
    blobUrl?: string;
}
export { ImageData_2 as ImageData }

/** The image can be either base64 encoded bytes or a blob URL. You can choose only one of these options. If both are provided, the request will be refused. The maximum image size is 2048 x 2048 pixels and should not exceed 4 MB, while the minimum image size is 50 x 50 pixels. */
export declare interface ImageDataOutput {
    /** The Base64 encoding of the image. */
    content?: string;
    /** The blob url of the image. */
    blobUrl?: string;
}

export declare function isUnexpected(response: AnalyzeText200Response | AnalyzeTextDefaultResponse): response is AnalyzeTextDefaultResponse;

export declare function isUnexpected(response: AnalyzeImage200Response | AnalyzeImageDefaultResponse): response is AnalyzeImageDefaultResponse;

export declare function isUnexpected(response: GetTextBlocklist200Response | GetTextBlocklistDefaultResponse): response is GetTextBlocklistDefaultResponse;

export declare function isUnexpected(response: CreateOrUpdateTextBlocklist200Response | CreateOrUpdateTextBlocklist201Response | CreateOrUpdateTextBlocklistDefaultResponse): response is CreateOrUpdateTextBlocklistDefaultResponse;

export declare function isUnexpected(response: DeleteTextBlocklist204Response | DeleteTextBlocklistDefaultResponse): response is DeleteTextBlocklistDefaultResponse;

export declare function isUnexpected(response: ListTextBlocklists200Response | ListTextBlocklistsDefaultResponse): response is ListTextBlocklistsDefaultResponse;

export declare function isUnexpected(response: AddOrUpdateBlocklistItems200Response | AddOrUpdateBlocklistItemsDefaultResponse): response is AddOrUpdateBlocklistItemsDefaultResponse;

export declare function isUnexpected(response: RemoveBlocklistItems204Response | RemoveBlocklistItemsDefaultResponse): response is RemoveBlocklistItemsDefaultResponse;

export declare function isUnexpected(response: GetTextBlocklistItem200Response | GetTextBlocklistItemDefaultResponse): response is GetTextBlocklistItemDefaultResponse;

export declare function isUnexpected(response: ListTextBlocklistItems200Response | ListTextBlocklistItemsDefaultResponse): response is ListTextBlocklistItemsDefaultResponse;

export declare interface ListTextBlocklistItems {
    /** Get all blocklistItems in a text blocklist. */
    get(options?: ListTextBlocklistItemsParameters): StreamableMethod<ListTextBlocklistItems200Response | ListTextBlocklistItemsDefaultResponse>;
}

/** The request has succeeded. */
export declare interface ListTextBlocklistItems200Response extends HttpResponse {
    status: "200";
    body: PagedTextBlocklistItemOutput;
}

export declare interface ListTextBlocklistItemsDefaultHeaders {
    /** String error code indicating what went wrong. */
    "x-ms-error-code"?: string;
}

export declare interface ListTextBlocklistItemsDefaultResponse extends HttpResponse {
    status: string;
    body: ErrorResponse;
    headers: RawHttpHeaders & ListTextBlocklistItemsDefaultHeaders;
}

export declare type ListTextBlocklistItemsParameters = ListTextBlocklistItemsQueryParam & RequestParameters;

export declare interface ListTextBlocklistItemsQueryParam {
    queryParameters?: ListTextBlocklistItemsQueryParamProperties;
}

export declare interface ListTextBlocklistItemsQueryParamProperties {
    /** The number of result items to return. */
    top?: number;
    /** The number of result items to skip. */
    skip?: number;
    /** The maximum number of result items per page. */
    maxpagesize?: number;
}

export declare interface ListTextBlocklists {
    /** Get all text blocklists details. */
    get(options?: ListTextBlocklistsParameters): StreamableMethod<ListTextBlocklists200Response | ListTextBlocklistsDefaultResponse>;
}

/** The request has succeeded. */
export declare interface ListTextBlocklists200Response extends HttpResponse {
    status: "200";
    body: PagedTextBlocklistOutput;
}

export declare interface ListTextBlocklistsDefaultHeaders {
    /** String error code indicating what went wrong. */
    "x-ms-error-code"?: string;
}

export declare interface ListTextBlocklistsDefaultResponse extends HttpResponse {
    status: string;
    body: ErrorResponse;
    headers: RawHttpHeaders & ListTextBlocklistsDefaultHeaders;
}

export declare type ListTextBlocklistsParameters = RequestParameters;

/** Paged collection of TextBlocklistItem items */
export declare type PagedTextBlocklistItemOutput = Paged<TextBlocklistItemOutput>;

/** Paged collection of TextBlocklist items */
export declare type PagedTextBlocklistOutput = Paged<TextBlocklistOutput>;

/**
 * Helper to paginate results from an initial response that follows the specification of Autorest `x-ms-pageable` extension
 * @param client - Client to use for sending the next page requests
 * @param initialResponse - Initial response containing the nextLink and current page of elements
 * @param customGetPage - Optional - Function to define how to extract the page and next link to be used to paginate the results
 * @returns - PagedAsyncIterableIterator to iterate the elements
 */
export declare function paginate<TResponse extends PathUncheckedResponse>(client: Client, initialResponse: TResponse, options?: PagingOptions<TResponse>): PagedAsyncIterableIterator<PaginateReturn<TResponse>>;

/**
 * Helper type to infer the Type of the paged elements from the response type
 * This type is generated based on the swagger information for x-ms-pageable
 * specifically on the itemName property which indicates the property of the response
 * where the page items are found. The default value is `value`.
 * This type will allow us to provide strongly typed Iterator based on the response we get as second parameter
 */
export declare type PaginateReturn<TResult> = TResult extends {
    body: {
        value?: infer TPage;
    };
} ? GetArrayType<TPage> : Array<unknown>;

/**
 * Options for the paging helper
 */
export declare interface PagingOptions<TResponse> {
    /**
     * Custom function to extract pagination details for crating the PagedAsyncIterableIterator
     */
    customGetPage?: GetPage<PaginateReturn<TResponse>[]>;
}

export declare interface RemoveBlocklistItems {
    /** Remove blocklistItems from a text blocklist. You can remove at most 100 BlocklistItems in one request. */
    post(options: RemoveBlocklistItemsParameters): StreamableMethod<RemoveBlocklistItems204Response | RemoveBlocklistItemsDefaultResponse>;
}

/** There is no content to send for this request, but the headers may be useful. */
export declare interface RemoveBlocklistItems204Response extends HttpResponse {
    status: "204";
}

export declare interface RemoveBlocklistItemsBodyParam {
    /** Options for removing blocklist items. */
    body: RemoveTextBlocklistItemsOptions;
}

export declare interface RemoveBlocklistItemsDefaultHeaders {
    /** String error code indicating what went wrong. */
    "x-ms-error-code"?: string;
}

export declare interface RemoveBlocklistItemsDefaultResponse extends HttpResponse {
    status: string;
    body: ErrorResponse;
    headers: RawHttpHeaders & RemoveBlocklistItemsDefaultHeaders;
}

export declare type RemoveBlocklistItemsParameters = RemoveBlocklistItemsBodyParam & RequestParameters;

/** The request to remove blocklistItems from a text blocklist. */
export declare interface RemoveTextBlocklistItemsOptions {
    /** Array of blocklistItemIds to remove. */
    blocklistItemIds: string[];
}

export declare interface Routes {
    /** Resource for '/text:analyze' has methods for the following verbs: post */
    (path: "/text:analyze"): AnalyzeText;
    /** Resource for '/image:analyze' has methods for the following verbs: post */
    (path: "/image:analyze"): AnalyzeImage;
    /** Resource for '/text/blocklists/\{blocklistName\}' has methods for the following verbs: get, patch, delete */
    (path: "/text/blocklists/{blocklistName}", blocklistName: string): GetTextBlocklist;
    /** Resource for '/text/blocklists' has methods for the following verbs: get */
    (path: "/text/blocklists"): ListTextBlocklists;
    /** Resource for '/text/blocklists/\{blocklistName\}:addOrUpdateBlocklistItems' has methods for the following verbs: post */
    (path: "/text/blocklists/{blocklistName}:addOrUpdateBlocklistItems", blocklistName: string): AddOrUpdateBlocklistItems;
    /** Resource for '/text/blocklists/\{blocklistName\}:removeBlocklistItems' has methods for the following verbs: post */
    (path: "/text/blocklists/{blocklistName}:removeBlocklistItems", blocklistName: string): RemoveBlocklistItems;
    /** Resource for '/text/blocklists/\{blocklistName\}/blocklistItems/\{blocklistItemId\}' has methods for the following verbs: get */
    (path: "/text/blocklists/{blocklistName}/blocklistItems/{blocklistItemId}", blocklistName: string, blocklistItemId: string): GetTextBlocklistItem;
    /** Resource for '/text/blocklists/\{blocklistName\}/blocklistItems' has methods for the following verbs: get */
    (path: "/text/blocklists/{blocklistName}/blocklistItems", blocklistName: string): ListTextBlocklistItems;
}

/** Text Blocklist. */
export declare interface TextBlocklist {
    /** Text blocklist name. */
    blocklistName: string;
    /** Text blocklist description. */
    description?: string;
}

/** Item in a TextBlocklist. */
export declare interface TextBlocklistItem {
    /** BlocklistItem description. */
    description?: string;
    /** BlocklistItem content. */
    text: string;
}

/** Item in a TextBlocklist. */
export declare interface TextBlocklistItemOutput {
    /** The service will generate a BlocklistItemId, which will be a UUID. */
    readonly blocklistItemId: string;
    /** BlocklistItem description. */
    description?: string;
    /** BlocklistItem content. */
    text: string;
}

/** The result of blocklist match. */
export declare interface TextBlocklistMatchOutput {
    /** The name of the matched blocklist. */
    blocklistName: string;
    /** The ID of the matched item. */
    blocklistItemId: string;
    /** The content of the matched item. */
    blocklistItemText: string;
}

/** Text Blocklist. */
export declare interface TextBlocklistOutput {
    /** Text blocklist name. */
    blocklistName: string;
    /** Text blocklist description. */
    description?: string;
}

/** The resource instance. */
export declare type TextBlocklistResourceMergeAndPatch = Partial<TextBlocklist>;

/** Text analysis result. */
export declare interface TextCategoriesAnalysisOutput {
    /**
     * The text analysis category.
     *
     * Possible values: Hate, SelfHarm, Sexual, Violence
     */
    category: string;
    /** The value increases with the severity of the input content. The value of this field is determined by the output type specified in the request. The output type could be ‘FourSeverityLevels’ or ‘EightSeverity Levels’, and the output value can be 0, 2, 4, 6 or 0, 1, 2, 3, 4, 5, 6, or 7. */
    severity?: number;
}

export { }

{"version":3,"file":"isUnexpected.js","sourceRoot":"","sources":["../../src/isUnexpected.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  AnalyzeText200Response,\n  AnalyzeTextDefaultResponse,\n  AnalyzeImage200Response,\n  AnalyzeImageDefaultResponse,\n  GetTextBlocklist200Response,\n  GetTextBlocklistDefaultResponse,\n  CreateOrUpdateTextBlocklist200Response,\n  CreateOrUpdateTextBlocklist201Response,\n  CreateOrUpdateTextBlocklistDefaultResponse,\n  DeleteTextBlocklist204Response,\n  DeleteTextBlocklistDefaultResponse,\n  ListTextBlocklists200Response,\n  ListTextBlocklistsDefaultResponse,\n  AddOrUpdateBlocklistItems200Response,\n  AddOrUpdateBlocklistItemsDefaultResponse,\n  RemoveBlocklistItems204Response,\n  RemoveBlocklistItemsDefaultResponse,\n  GetTextBlocklistItem200Response,\n  GetTextBlocklistItemDefaultResponse,\n  ListTextBlocklistItems200Response,\n  ListTextBlocklistItemsDefaultResponse,\n} from \"./responses\";\n\nconst responseMap: Record<string, string[]> = {\n  \"POST /text:analyze\": [\"200\"],\n  \"POST /image:analyze\": [\"200\"],\n  \"GET /text/blocklists/{blocklistName}\": [\"200\"],\n  \"PATCH /text/blocklists/{blocklistName}\": [\"200\", \"201\"],\n  \"DELETE /text/blocklists/{blocklistName}\": [\"204\"],\n  \"GET /text/blocklists\": [\"200\"],\n  \"POST /text/blocklists/{blocklistName}:addOrUpdateBlocklistItems\": [\"200\"],\n  \"POST /text/blocklists/{blocklistName}:removeBlocklistItems\": [\"204\"],\n  \"GET /text/blocklists/{blocklistName}/blocklistItems/{blocklistItemId}\": [\"200\"],\n  \"GET /text/blocklists/{blocklistName}/blocklistItems\": [\"200\"],\n};\n\nexport function isUnexpected(\n  response: AnalyzeText200Response | AnalyzeTextDefaultResponse\n): response is AnalyzeTextDefaultResponse;\nexport function isUnexpected(\n  response: AnalyzeImage200Response | AnalyzeImageDefaultResponse\n): response is AnalyzeImageDefaultResponse;\nexport function isUnexpected(\n  response: GetTextBlocklist200Response | GetTextBlocklistDefaultResponse\n): response is GetTextBlocklistDefaultResponse;\nexport function isUnexpected(\n  response:\n    | CreateOrUpdateTextBlocklist200Response\n    | CreateOrUpdateTextBlocklist201Response\n    | CreateOrUpdateTextBlocklistDefaultResponse\n): response is CreateOrUpdateTextBlocklistDefaultResponse;\nexport function isUnexpected(\n  response: DeleteTextBlocklist204Response | DeleteTextBlocklistDefaultResponse\n): response is DeleteTextBlocklistDefaultResponse;\nexport function isUnexpected(\n  response: ListTextBlocklists200Response | ListTextBlocklistsDefaultResponse\n): response is ListTextBlocklistsDefaultResponse;\nexport function isUnexpected(\n  response: AddOrUpdateBlocklistItems200Response | AddOrUpdateBlocklistItemsDefaultResponse\n): response is AddOrUpdateBlocklistItemsDefaultResponse;\nexport function isUnexpected(\n  response: RemoveBlocklistItems204Response | RemoveBlocklistItemsDefaultResponse\n): response is RemoveBlocklistItemsDefaultResponse;\nexport function isUnexpected(\n  response: GetTextBlocklistItem200Response | GetTextBlocklistItemDefaultResponse\n): response is GetTextBlocklistItemDefaultResponse;\nexport function isUnexpected(\n  response: ListTextBlocklistItems200Response | ListTextBlocklistItemsDefaultResponse\n): response is ListTextBlocklistItemsDefaultResponse;\nexport function isUnexpected(\n  response:\n    | AnalyzeText200Response\n    | AnalyzeTextDefaultResponse\n    | AnalyzeImage200Response\n    | AnalyzeImageDefaultResponse\n    | GetTextBlocklist200Response\n    | GetTextBlocklistDefaultResponse\n    | CreateOrUpdateTextBlocklist200Response\n    | CreateOrUpdateTextBlocklist201Response\n    | CreateOrUpdateTextBlocklistDefaultResponse\n    | DeleteTextBlocklist204Response\n    | DeleteTextBlocklistDefaultResponse\n    | ListTextBlocklists200Response\n    | ListTextBlocklistsDefaultResponse\n    | AddOrUpdateBlocklistItems200Response\n    | AddOrUpdateBlocklistItemsDefaultResponse\n    | RemoveBlocklistItems204Response\n    | RemoveBlocklistItemsDefaultResponse\n    | GetTextBlocklistItem200Response\n    | GetTextBlocklistItemDefaultResponse\n    | ListTextBlocklistItems200Response\n    | ListTextBlocklistItemsDefaultResponse\n): response is\n  | AnalyzeTextDefaultResponse\n  | AnalyzeImageDefaultResponse\n  | GetTextBlocklistDefaultResponse\n  | CreateOrUpdateTextBlocklistDefaultResponse\n  | DeleteTextBlocklistDefaultResponse\n  | ListTextBlocklistsDefaultResponse\n  | AddOrUpdateBlocklistItemsDefaultResponse\n  | RemoveBlocklistItemsDefaultResponse\n  | GetTextBlocklistItemDefaultResponse\n  | ListTextBlocklistItemsDefaultResponse {\n  const lroOriginal = response.headers[\"x-ms-original-url\"];\n  const url = new URL(lroOriginal ?? response.request.url);\n  const method = response.request.method;\n  let pathDetails = responseMap[`${method} ${url.pathname}`];\n  if (!pathDetails) {\n    pathDetails = getParametrizedPathSuccess(method, url.pathname);\n  }\n  return !pathDetails.includes(response.status);\n}\n\nfunction getParametrizedPathSuccess(method: string, path: string): string[] {\n  const pathParts = path.split(\"/\");\n\n  // Traverse list to match the longest candidate\n  // matchedLen: the length of candidate path\n  // matchedValue: the matched status code array\n  let matchedLen = -1,\n    matchedValue: string[] = [];\n\n  // Iterate the responseMap to find a match\n  for (const [key, value] of Object.entries(responseMap)) {\n    // Extracting the path from the map key which is in format\n    // GET /path/foo\n    if (!key.startsWith(method)) {\n      continue;\n    }\n    const candidatePath = getPathFromMapKey(key);\n    // Get each part of the url path\n    const candidateParts = candidatePath.split(\"/\");\n\n    // track if we have found a match to return the values found.\n    let found = true;\n    for (let i = candidateParts.length - 1, j = pathParts.length - 1; i >= 1 && j >= 1; i--, j--) {\n      if (candidateParts[i]?.startsWith(\"{\") && candidateParts[i]?.indexOf(\"}\") !== -1) {\n        const start = candidateParts[i]!.indexOf(\"}\") + 1,\n          end = candidateParts[i]?.length;\n        // If the current part of the candidate is a \"template\" part\n        // Try to use the suffix of pattern to match the path\n        // {guid} ==> $\n        // {guid}:export ==> :export$\n        const isMatched = new RegExp(`${candidateParts[i]?.slice(start, end)}`).test(\n          pathParts[j] || \"\"\n        );\n\n        if (!isMatched) {\n          found = false;\n          break;\n        }\n        continue;\n      }\n\n      // If the candidate part is not a template and\n      // the parts don't match mark the candidate as not found\n      // to move on with the next candidate path.\n      if (candidateParts[i] !== pathParts[j]) {\n        found = false;\n        break;\n      }\n    }\n\n    // We finished evaluating the current candidate parts\n    // Update the matched value if and only if we found the longer pattern\n    if (found && candidatePath.length > matchedLen) {\n      matchedLen = candidatePath.length;\n      matchedValue = value;\n    }\n  }\n\n  return matchedValue;\n}\n\nfunction getPathFromMapKey(mapKey: string): string {\n  const pathStart = mapKey.indexOf(\"/\");\n  return mapKey.slice(pathStart);\n}\n"]}